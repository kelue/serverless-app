{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "The AWS CloudFormation template for this Serverless application",
  "Resources": {
    "ServerlessDeploymentBucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "BucketEncryption": {
          "ServerSideEncryptionConfiguration": [
            {
              "ServerSideEncryptionByDefault": {
                "SSEAlgorithm": "AES256"
              }
            }
          ]
        }
      }
    },
    "ServerlessDeploymentBucketPolicy": {
      "Type": "AWS::S3::BucketPolicy",
      "Properties": {
        "Bucket": {
          "Ref": "ServerlessDeploymentBucket"
        },
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "s3:*",
              "Effect": "Deny",
              "Principal": "*",
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":s3:::",
                      {
                        "Ref": "ServerlessDeploymentBucket"
                      },
                      "/*"
                    ]
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":s3:::",
                      {
                        "Ref": "ServerlessDeploymentBucket"
                      }
                    ]
                  ]
                }
              ],
              "Condition": {
                "Bool": {
                  "aws:SecureTransport": false
                }
              }
            }
          ]
        }
      }
    },
    "GroupsLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/serverless-app-dev-groups"
      }
    },
    "CreategroupLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/serverless-app-dev-creategroup"
      }
    },
    "GetImagesLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/serverless-app-dev-getImages"
      }
    },
    "GetimageLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/serverless-app-dev-getimage"
      }
    },
    "CreateimageLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/serverless-app-dev-createimage"
      }
    },
    "SendNotificationsLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/serverless-app-dev-sendNotifications"
      }
    },
    "ConnectLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/serverless-app-dev-connect"
      }
    },
    "DisconnectLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/serverless-app-dev-disconnect"
      }
    },
    "ElasticSearchSyncLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/serverless-app-dev-elasticSearchSync"
      }
    },
    "ResizeLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/serverless-app-dev-resize"
      }
    },
    "Auth0AuthorizerLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/serverless-app-dev-auth0Authorizer"
      }
    },
    "IamRoleLambdaExecution": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": {
              "Fn::Join": [
                "-",
                [
                  "serverless-app",
                  "dev",
                  "lambda"
                ]
              ]
            },
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogStream",
                    "logs:CreateLogGroup"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/serverless-app-dev*:*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:PutLogEvents"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/serverless-app-dev*:*:*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "dynamodb:Scan",
                    "dynamodb:PutItem",
                    "dynamodb:GetItem"
                  ],
                  "Resource": [
                    {
                      "Fn::GetAtt": [
                        "GroupsDynamoDBTable",
                        "Arn"
                      ]
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "dynamodb:Query",
                    "dynamodb:PutItem"
                  ],
                  "Resource": [
                    {
                      "Fn::GetAtt": [
                        "ImagesDynamoDBTable",
                        "Arn"
                      ]
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "dynamodb:Query"
                  ],
                  "Resource": "arn:aws:dynamodb:us-east-2:*:table/Image-dev/index/ImageIdIndex"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "s3:PutObject",
                    "s3:GetObject"
                  ],
                  "Resource": "arn:aws:s3:::serverless-udagram-images-kelue-dev/*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "dynamodb:Scan",
                    "dynamodb:PutItem",
                    "dynamodb:DeleteItem"
                  ],
                  "Resource": [
                    {
                      "Fn::GetAtt": [
                        "ConnectionsDynamoDBTable",
                        "Arn"
                      ]
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "s3:PutObject"
                  ],
                  "Resource": "arn:aws:s3:::serverless-udagram-images-kelue-thumbnails-dev/*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "es:*",
                    "es:ESHttpPost"
                  ],
                  "Resource": {
                    "Fn::GetAtt": [
                      "ImagesSearch",
                      "Arn"
                    ]
                  }
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "secretsmanager:GetSecretValue"
                  ],
                  "Resource": {
                    "Ref": "Auth0Secret"
                  }
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "kms:Decrypt"
                  ],
                  "Resource": [
                    {
                      "Fn::GetAtt": [
                        "KMSKey",
                        "Arn"
                      ]
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "execute-api:ManageConnections"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:execute-api:*:*:*/@connections/*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "dynamodb:GetRecords",
                    "dynamodb:GetShardIterator",
                    "dynamodb:DescribeStream",
                    "dynamodb:ListStreams"
                  ],
                  "Resource": [
                    {
                      "Fn::GetAtt": [
                        "ImagesDynamoDBTable",
                        "StreamArn"
                      ]
                    }
                  ]
                }
              ]
            }
          }
        ],
        "Path": "/",
        "RoleName": {
          "Fn::Join": [
            "-",
            [
              "serverless-app",
              "dev",
              {
                "Ref": "AWS::Region"
              },
              "lambdaRole"
            ]
          ]
        }
      }
    },
    "GroupsLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/serverless-app/dev/1635745971767-2021-11-01T05:52:51.767Z/serverless-app.zip"
        },
        "Handler": "src/functions/getGroups/handler.main",
        "Runtime": "nodejs12.x",
        "FunctionName": "serverless-app-dev-groups",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
            "GROUPS_TABLE": "Groups-dev",
            "IMAGES_TABLE": "Image-dev",
            "IMAGE_ID_INDEX": "ImageIdIndex",
            "IMAGES_S3_BUCKET": "serverless-udagram-images-kelue-dev",
            "SIGNED_URL_EXPIRATION": "300",
            "CONNECTIONS_TABLE": "Connections-dev",
            "THUMBNAILS_S3_BUCKET": "serverless-udagram-images-kelue-thumbnails-dev",
            "AUTH_0_SECRET_ID": "Auth0Secret-dev",
            "AUTH_0_SECRET_FIELD": "auth0Secret"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "GroupsLogGroup"
      ]
    },
    "CreategroupLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/serverless-app/dev/1635745971767-2021-11-01T05:52:51.767Z/serverless-app.zip"
        },
        "Handler": "src/functions/createGroup/handler.main",
        "Runtime": "nodejs12.x",
        "FunctionName": "serverless-app-dev-creategroup",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
            "GROUPS_TABLE": "Groups-dev",
            "IMAGES_TABLE": "Image-dev",
            "IMAGE_ID_INDEX": "ImageIdIndex",
            "IMAGES_S3_BUCKET": "serverless-udagram-images-kelue-dev",
            "SIGNED_URL_EXPIRATION": "300",
            "CONNECTIONS_TABLE": "Connections-dev",
            "THUMBNAILS_S3_BUCKET": "serverless-udagram-images-kelue-thumbnails-dev",
            "AUTH_0_SECRET_ID": "Auth0Secret-dev",
            "AUTH_0_SECRET_FIELD": "auth0Secret"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "CreategroupLogGroup"
      ]
    },
    "GetImagesLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/serverless-app/dev/1635745971767-2021-11-01T05:52:51.767Z/serverless-app.zip"
        },
        "Handler": "src/functions/getImages/handler.main",
        "Runtime": "nodejs12.x",
        "FunctionName": "serverless-app-dev-getImages",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
            "GROUPS_TABLE": "Groups-dev",
            "IMAGES_TABLE": "Image-dev",
            "IMAGE_ID_INDEX": "ImageIdIndex",
            "IMAGES_S3_BUCKET": "serverless-udagram-images-kelue-dev",
            "SIGNED_URL_EXPIRATION": "300",
            "CONNECTIONS_TABLE": "Connections-dev",
            "THUMBNAILS_S3_BUCKET": "serverless-udagram-images-kelue-thumbnails-dev",
            "AUTH_0_SECRET_ID": "Auth0Secret-dev",
            "AUTH_0_SECRET_FIELD": "auth0Secret"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "GetImagesLogGroup"
      ]
    },
    "GetimageLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/serverless-app/dev/1635745971767-2021-11-01T05:52:51.767Z/serverless-app.zip"
        },
        "Handler": "src/functions/getImage/handler.main",
        "Runtime": "nodejs12.x",
        "FunctionName": "serverless-app-dev-getimage",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
            "GROUPS_TABLE": "Groups-dev",
            "IMAGES_TABLE": "Image-dev",
            "IMAGE_ID_INDEX": "ImageIdIndex",
            "IMAGES_S3_BUCKET": "serverless-udagram-images-kelue-dev",
            "SIGNED_URL_EXPIRATION": "300",
            "CONNECTIONS_TABLE": "Connections-dev",
            "THUMBNAILS_S3_BUCKET": "serverless-udagram-images-kelue-thumbnails-dev",
            "AUTH_0_SECRET_ID": "Auth0Secret-dev",
            "AUTH_0_SECRET_FIELD": "auth0Secret"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "GetimageLogGroup"
      ]
    },
    "CreateimageLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/serverless-app/dev/1635745971767-2021-11-01T05:52:51.767Z/serverless-app.zip"
        },
        "Handler": "src/functions/createImage/handler.main",
        "Runtime": "nodejs12.x",
        "FunctionName": "serverless-app-dev-createimage",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
            "GROUPS_TABLE": "Groups-dev",
            "IMAGES_TABLE": "Image-dev",
            "IMAGE_ID_INDEX": "ImageIdIndex",
            "IMAGES_S3_BUCKET": "serverless-udagram-images-kelue-dev",
            "SIGNED_URL_EXPIRATION": "300",
            "CONNECTIONS_TABLE": "Connections-dev",
            "THUMBNAILS_S3_BUCKET": "serverless-udagram-images-kelue-thumbnails-dev",
            "AUTH_0_SECRET_ID": "Auth0Secret-dev",
            "AUTH_0_SECRET_FIELD": "auth0Secret"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "CreateimageLogGroup"
      ]
    },
    "SendNotificationsLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/serverless-app/dev/1635745971767-2021-11-01T05:52:51.767Z/serverless-app.zip"
        },
        "Handler": "src/functions/sendNotifications/handler.main",
        "Runtime": "nodejs12.x",
        "FunctionName": "serverless-app-dev-sendNotifications",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
            "GROUPS_TABLE": "Groups-dev",
            "IMAGES_TABLE": "Image-dev",
            "IMAGE_ID_INDEX": "ImageIdIndex",
            "IMAGES_S3_BUCKET": "serverless-udagram-images-kelue-dev",
            "SIGNED_URL_EXPIRATION": "300",
            "CONNECTIONS_TABLE": "Connections-dev",
            "THUMBNAILS_S3_BUCKET": "serverless-udagram-images-kelue-thumbnails-dev",
            "AUTH_0_SECRET_ID": "Auth0Secret-dev",
            "AUTH_0_SECRET_FIELD": "auth0Secret",
            "STAGE": "dev",
            "API_ID": {
              "Ref": "WebsocketsApi"
            }
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "SendNotificationsLogGroup"
      ]
    },
    "ConnectLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/serverless-app/dev/1635745971767-2021-11-01T05:52:51.767Z/serverless-app.zip"
        },
        "Handler": "src/functions/connect/handler.main",
        "Runtime": "nodejs12.x",
        "FunctionName": "serverless-app-dev-connect",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
            "GROUPS_TABLE": "Groups-dev",
            "IMAGES_TABLE": "Image-dev",
            "IMAGE_ID_INDEX": "ImageIdIndex",
            "IMAGES_S3_BUCKET": "serverless-udagram-images-kelue-dev",
            "SIGNED_URL_EXPIRATION": "300",
            "CONNECTIONS_TABLE": "Connections-dev",
            "THUMBNAILS_S3_BUCKET": "serverless-udagram-images-kelue-thumbnails-dev",
            "AUTH_0_SECRET_ID": "Auth0Secret-dev",
            "AUTH_0_SECRET_FIELD": "auth0Secret"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "ConnectLogGroup"
      ]
    },
    "DisconnectLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/serverless-app/dev/1635745971767-2021-11-01T05:52:51.767Z/serverless-app.zip"
        },
        "Handler": "src/functions/disconnect/handler.main",
        "Runtime": "nodejs12.x",
        "FunctionName": "serverless-app-dev-disconnect",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
            "GROUPS_TABLE": "Groups-dev",
            "IMAGES_TABLE": "Image-dev",
            "IMAGE_ID_INDEX": "ImageIdIndex",
            "IMAGES_S3_BUCKET": "serverless-udagram-images-kelue-dev",
            "SIGNED_URL_EXPIRATION": "300",
            "CONNECTIONS_TABLE": "Connections-dev",
            "THUMBNAILS_S3_BUCKET": "serverless-udagram-images-kelue-thumbnails-dev",
            "AUTH_0_SECRET_ID": "Auth0Secret-dev",
            "AUTH_0_SECRET_FIELD": "auth0Secret"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "DisconnectLogGroup"
      ]
    },
    "ElasticSearchSyncLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/serverless-app/dev/1635745971767-2021-11-01T05:52:51.767Z/serverless-app.zip"
        },
        "Handler": "src/functions/elasticSearchSync/handler.main",
        "Runtime": "nodejs12.x",
        "FunctionName": "serverless-app-dev-elasticSearchSync",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
            "GROUPS_TABLE": "Groups-dev",
            "IMAGES_TABLE": "Image-dev",
            "IMAGE_ID_INDEX": "ImageIdIndex",
            "IMAGES_S3_BUCKET": "serverless-udagram-images-kelue-dev",
            "SIGNED_URL_EXPIRATION": "300",
            "CONNECTIONS_TABLE": "Connections-dev",
            "THUMBNAILS_S3_BUCKET": "serverless-udagram-images-kelue-thumbnails-dev",
            "AUTH_0_SECRET_ID": "Auth0Secret-dev",
            "AUTH_0_SECRET_FIELD": "auth0Secret",
            "ES_ENDPOINT": {
              "Fn::GetAtt": [
                "ImagesSearch",
                "DomainEndpoint"
              ]
            }
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "ElasticSearchSyncLogGroup"
      ]
    },
    "ResizeLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/serverless-app/dev/1635745971767-2021-11-01T05:52:51.767Z/serverless-app.zip"
        },
        "Handler": "src/functions/resizeImage/handler.main",
        "Runtime": "nodejs12.x",
        "FunctionName": "serverless-app-dev-resize",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
            "GROUPS_TABLE": "Groups-dev",
            "IMAGES_TABLE": "Image-dev",
            "IMAGE_ID_INDEX": "ImageIdIndex",
            "IMAGES_S3_BUCKET": "serverless-udagram-images-kelue-dev",
            "SIGNED_URL_EXPIRATION": "300",
            "CONNECTIONS_TABLE": "Connections-dev",
            "THUMBNAILS_S3_BUCKET": "serverless-udagram-images-kelue-thumbnails-dev",
            "AUTH_0_SECRET_ID": "Auth0Secret-dev",
            "AUTH_0_SECRET_FIELD": "auth0Secret",
            "STAGE": "dev",
            "API_ID": {
              "Ref": "WebsocketsApi"
            }
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "ResizeLogGroup"
      ]
    },
    "Auth0AuthorizerLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/serverless-app/dev/1635745971767-2021-11-01T05:52:51.767Z/serverless-app.zip"
        },
        "Handler": "src/functions/auth0Authorizer/handler.main",
        "Runtime": "nodejs12.x",
        "FunctionName": "serverless-app-dev-auth0Authorizer",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
            "GROUPS_TABLE": "Groups-dev",
            "IMAGES_TABLE": "Image-dev",
            "IMAGE_ID_INDEX": "ImageIdIndex",
            "IMAGES_S3_BUCKET": "serverless-udagram-images-kelue-dev",
            "SIGNED_URL_EXPIRATION": "300",
            "CONNECTIONS_TABLE": "Connections-dev",
            "THUMBNAILS_S3_BUCKET": "serverless-udagram-images-kelue-thumbnails-dev",
            "AUTH_0_SECRET_ID": "Auth0Secret-dev",
            "AUTH_0_SECRET_FIELD": "auth0Secret"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "Auth0AuthorizerLogGroup"
      ]
    },
    "GroupsLambdaVersionSzdknUM7jJPuD1USgR8SgJ202OCOX5Zui7zi1SX3co": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GroupsLambdaFunction"
        },
        "CodeSha256": "KGhF1Ol3x5FeNFNP1ZqjZmEtCWboU1B/0Z8+GbCzzcw="
      }
    },
    "CreategroupLambdaVersionmlsAL9rsPKD3Rs4Bz7BANrB3GRpkcaceADkEiRgK1Iw": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "CreategroupLambdaFunction"
        },
        "CodeSha256": "KGhF1Ol3x5FeNFNP1ZqjZmEtCWboU1B/0Z8+GbCzzcw="
      }
    },
    "GetImagesLambdaVersionmzlcILae3qpD4fiadv2lnQy4NF2JaqzKFMrcJZ9sA": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetImagesLambdaFunction"
        },
        "CodeSha256": "KGhF1Ol3x5FeNFNP1ZqjZmEtCWboU1B/0Z8+GbCzzcw="
      }
    },
    "GetimageLambdaVersion3O2OaIfWYVWSCTEqqhHAxhsJXQ4B02UZneL9UwaD1tM": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetimageLambdaFunction"
        },
        "CodeSha256": "KGhF1Ol3x5FeNFNP1ZqjZmEtCWboU1B/0Z8+GbCzzcw="
      }
    },
    "CreateimageLambdaVersionc2RE48pHioU0ynD402LvScrKPQM0nCSMslZMNpoUzY": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "CreateimageLambdaFunction"
        },
        "CodeSha256": "KGhF1Ol3x5FeNFNP1ZqjZmEtCWboU1B/0Z8+GbCzzcw="
      }
    },
    "SendNotificationsLambdaVersionKxwivloPff9JtoqlK61Q4nUASFDN049uhDUuNlHO0g": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "SendNotificationsLambdaFunction"
        },
        "CodeSha256": "KGhF1Ol3x5FeNFNP1ZqjZmEtCWboU1B/0Z8+GbCzzcw="
      }
    },
    "ConnectLambdaVersionuy5uyfcjFJt9PBuyrre87qtrnjwIKi0Cu7JlmoGZWhc": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "ConnectLambdaFunction"
        },
        "CodeSha256": "KGhF1Ol3x5FeNFNP1ZqjZmEtCWboU1B/0Z8+GbCzzcw="
      }
    },
    "DisconnectLambdaVersioncewcyNJbYqw8BtpgDxa6QbSUzi9yj3JULLXDSEMse0": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "DisconnectLambdaFunction"
        },
        "CodeSha256": "KGhF1Ol3x5FeNFNP1ZqjZmEtCWboU1B/0Z8+GbCzzcw="
      }
    },
    "ElasticSearchSyncLambdaVersionnaPuZcuXQ9wnGmlkP7G38z1uQI81z7MNb6YRe4LX10c": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "ElasticSearchSyncLambdaFunction"
        },
        "CodeSha256": "KGhF1Ol3x5FeNFNP1ZqjZmEtCWboU1B/0Z8+GbCzzcw="
      }
    },
    "ResizeLambdaVersionImhE7N0rQ6JoV72n6y8aUaKHXnsS7wTwAOwCDVV1I": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "ResizeLambdaFunction"
        },
        "CodeSha256": "KGhF1Ol3x5FeNFNP1ZqjZmEtCWboU1B/0Z8+GbCzzcw="
      }
    },
    "Auth0AuthorizerLambdaVersionqSlChBoGGyKQdtARYqkNig7n05VmG8wfCFVIzBdX0xc": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "Auth0AuthorizerLambdaFunction"
        },
        "CodeSha256": "KGhF1Ol3x5FeNFNP1ZqjZmEtCWboU1B/0Z8+GbCzzcw="
      }
    },
    "ApiGatewayRestApi": {
      "Type": "AWS::ApiGateway::RestApi",
      "Properties": {
        "Name": "serverless-app-dev",
        "EndpointConfiguration": {
          "Types": [
            "EDGE"
          ]
        },
        "Policy": "",
        "MinimumCompressionSize": 1024
      }
    },
    "ApiGatewayResourceGroups": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "groups",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceGroupsGroupidVar": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceGroups"
        },
        "PathPart": "{groupId}",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceGroupsGroupidVarImages": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceGroupsGroupidVar"
        },
        "PathPart": "images",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceImages": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "images",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceImagesImageidVar": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceImages"
        },
        "PathPart": "{imageId}",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodGroupsOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST,GET'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceGroups"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodGroupsGroupidVarImagesOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST,GET'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceGroupsGroupidVarImages"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodImagesImageidVarOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceImagesImageidVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodGroupsGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceGroups"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "GroupsLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "GroupsLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodGroupsPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceGroups"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "CUSTOM",
        "AuthorizerId": {
          "Ref": "Auth0AuthorizerApiGatewayAuthorizer"
        },
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "CreategroupLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": [],
        "RequestValidatorId": {
          "Ref": "ApiGatewayServerlessappRequestValidator"
        },
        "RequestModels": {
          "application/json": {
            "Ref": "ApiGatewayMethodGroupsPostApplicationJsonModel"
          }
        }
      },
      "DependsOn": "Auth0AuthorizerApiGatewayAuthorizer"
    },
    "ApiGatewayMethodGroupsGroupidVarImagesGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceGroupsGroupidVarImages"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "GetImagesLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "GetImagesLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodImagesImageidVarGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceImagesImageidVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "GetimageLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "GetimageLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodGroupsGroupidVarImagesPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceGroupsGroupidVarImages"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "CUSTOM",
        "AuthorizerId": {
          "Ref": "Auth0AuthorizerApiGatewayAuthorizer"
        },
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "CreateimageLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": [],
        "RequestValidatorId": {
          "Ref": "ApiGatewayServerlessappRequestValidator"
        },
        "RequestModels": {
          "application/json": {
            "Ref": "ApiGatewayMethodGroupsGroupidVarImagesPostApplicationJsonModel"
          }
        }
      },
      "DependsOn": "Auth0AuthorizerApiGatewayAuthorizer"
    },
    "ApiGatewayServerlessappRequestValidator": {
      "Type": "AWS::ApiGateway::RequestValidator",
      "Properties": {
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ValidateRequestBody": true,
        "ValidateRequestParameters": true,
        "Name": "serverless-app-dev | Validate request body and querystring parameters"
      }
    },
    "ApiGatewayMethodGroupsPostApplicationJsonModel": {
      "Type": "AWS::ApiGateway::Model",
      "Properties": {
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ContentType": "application/json",
        "Schema": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string"
            },
            "description": {
              "type": "string"
            }
          },
          "required": [
            "name",
            "description"
          ],
          "additionalProperties": false
        }
      }
    },
    "ApiGatewayMethodGroupsGroupidVarImagesPostApplicationJsonModel": {
      "Type": "AWS::ApiGateway::Model",
      "Properties": {
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ContentType": "application/json",
        "Schema": {
          "type": "object",
          "properties": {
            "title": {
              "type": "string"
            }
          },
          "required": [
            "title"
          ],
          "additionalProperties": false
        }
      }
    },
    "Auth0AuthorizerApiGatewayAuthorizer": {
      "Type": "AWS::ApiGateway::Authorizer",
      "Properties": {
        "AuthorizerResultTtlInSeconds": 300,
        "IdentitySource": "method.request.header.Authorization",
        "Name": "auth0Authorizer",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "AuthorizerUri": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":apigateway:",
              {
                "Ref": "AWS::Region"
              },
              ":lambda:path/2015-03-31/functions/",
              {
                "Fn::GetAtt": [
                  "Auth0AuthorizerLambdaFunction",
                  "Arn"
                ]
              },
              "/invocations"
            ]
          ]
        },
        "Type": "TOKEN"
      }
    },
    "ApiGatewayDeployment1635745942425": {
      "Type": "AWS::ApiGateway::Deployment",
      "Properties": {
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "StageName": "dev"
      },
      "DependsOn": [
        "ApiGatewayMethodGroupsOptions",
        "ApiGatewayMethodGroupsGroupidVarImagesOptions",
        "ApiGatewayMethodImagesImageidVarOptions",
        "ApiGatewayMethodGroupsGet",
        "ApiGatewayMethodGroupsPost",
        "ApiGatewayMethodGroupsGroupidVarImagesGet",
        "ApiGatewayMethodImagesImageidVarGet",
        "ApiGatewayMethodGroupsGroupidVarImagesPost"
      ]
    },
    "GroupsLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GroupsLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "CreategroupLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "CreategroupLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "Auth0AuthorizerLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "Auth0AuthorizerLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "GetImagesLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetImagesLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "GetimageLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetimageLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "CreateimageLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "CreateimageLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "WebsocketsApi": {
      "Type": "AWS::ApiGatewayV2::Api",
      "Properties": {
        "Name": "dev-serverless-app-websockets",
        "RouteSelectionExpression": "$request.body.action",
        "Description": "Serverless Websockets",
        "ProtocolType": "WEBSOCKET"
      }
    },
    "ConnectWebsocketsIntegration": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "WebsocketsApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":apigateway:",
              {
                "Ref": "AWS::Region"
              },
              ":lambda:path/2015-03-31/functions/",
              {
                "Fn::GetAtt": [
                  "ConnectLambdaFunction",
                  "Arn"
                ]
              },
              "/invocations"
            ]
          ]
        }
      }
    },
    "DisconnectWebsocketsIntegration": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "WebsocketsApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":apigateway:",
              {
                "Ref": "AWS::Region"
              },
              ":lambda:path/2015-03-31/functions/",
              {
                "Fn::GetAtt": [
                  "DisconnectLambdaFunction",
                  "Arn"
                ]
              },
              "/invocations"
            ]
          ]
        }
      }
    },
    "ConnectLambdaPermissionWebsockets": {
      "Type": "AWS::Lambda::Permission",
      "DependsOn": [
        "WebsocketsApi",
        "ConnectLambdaFunction"
      ],
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "ConnectLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com"
      }
    },
    "DisconnectLambdaPermissionWebsockets": {
      "Type": "AWS::Lambda::Permission",
      "DependsOn": [
        "WebsocketsApi",
        "DisconnectLambdaFunction"
      ],
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "DisconnectLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com"
      }
    },
    "SconnectWebsocketsRoute": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "WebsocketsApi"
        },
        "RouteKey": "$connect",
        "AuthorizationType": "NONE",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "ConnectWebsocketsIntegration"
              }
            ]
          ]
        }
      }
    },
    "SdisconnectWebsocketsRoute": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "WebsocketsApi"
        },
        "RouteKey": "$disconnect",
        "AuthorizationType": "NONE",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "DisconnectWebsocketsIntegration"
              }
            ]
          ]
        }
      }
    },
    "WebsocketsDeploymentStage": {
      "Type": "AWS::ApiGatewayV2::Stage",
      "Properties": {
        "ApiId": {
          "Ref": "WebsocketsApi"
        },
        "StageName": "dev",
        "Description": "Serverless Websockets",
        "DeploymentId": {
          "Ref": "WebsocketsDeploymentlfZOvb6Z08eNnxJKdRp091iOA286eItFdbpD4wkg"
        }
      }
    },
    "WebsocketsDeploymentlfZOvb6Z08eNnxJKdRp091iOA286eItFdbpD4wkg": {
      "Type": "AWS::ApiGatewayV2::Deployment",
      "DependsOn": [
        "SconnectWebsocketsRoute",
        "SdisconnectWebsocketsRoute"
      ],
      "Properties": {
        "ApiId": {
          "Ref": "WebsocketsApi"
        },
        "Description": "Serverless Websockets"
      }
    },
    "SendNotificationsSnsSubscriptionImagesTopicdev": {
      "Type": "AWS::SNS::Subscription",
      "Properties": {
        "TopicArn": {
          "Fn::Join": [
            ":",
            [
              "arn:aws:sns",
              {
                "Ref": "AWS::Region"
              },
              {
                "Ref": "AWS::AccountId"
              },
              "imagesTopic-dev"
            ]
          ]
        },
        "Protocol": "lambda",
        "Endpoint": {
          "Fn::GetAtt": [
            "SendNotificationsLambdaFunction",
            "Arn"
          ]
        }
      }
    },
    "SendNotificationsLambdaPermissionImagesTopicdevSNS": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "SendNotificationsLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "sns.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            ":",
            [
              "arn:aws:sns",
              {
                "Ref": "AWS::Region"
              },
              {
                "Ref": "AWS::AccountId"
              },
              "imagesTopic-dev"
            ]
          ]
        }
      }
    },
    "ResizeSnsSubscriptionImagesTopicdev": {
      "Type": "AWS::SNS::Subscription",
      "Properties": {
        "TopicArn": {
          "Fn::Join": [
            ":",
            [
              "arn:aws:sns",
              {
                "Ref": "AWS::Region"
              },
              {
                "Ref": "AWS::AccountId"
              },
              "imagesTopic-dev"
            ]
          ]
        },
        "Protocol": "lambda",
        "Endpoint": {
          "Fn::GetAtt": [
            "ResizeLambdaFunction",
            "Arn"
          ]
        }
      }
    },
    "ResizeLambdaPermissionImagesTopicdevSNS": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "ResizeLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "sns.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            ":",
            [
              "arn:aws:sns",
              {
                "Ref": "AWS::Region"
              },
              {
                "Ref": "AWS::AccountId"
              },
              "imagesTopic-dev"
            ]
          ]
        }
      }
    },
    "ElasticSearchSyncEventSourceMappingDynamodbImagesDynamoDBTable": {
      "Type": "AWS::Lambda::EventSourceMapping",
      "DependsOn": [
        "IamRoleLambdaExecution"
      ],
      "Properties": {
        "BatchSize": 10,
        "Enabled": true,
        "EventSourceArn": {
          "Fn::GetAtt": [
            "ImagesDynamoDBTable",
            "StreamArn"
          ]
        },
        "FunctionName": {
          "Fn::GetAtt": [
            "ElasticSearchSyncLambdaFunction",
            "Arn"
          ]
        },
        "StartingPosition": "TRIM_HORIZON"
      }
    },
    "GatewayResponseDefault4xx": {
      "Type": "AWS::ApiGateway::GatewayResponse",
      "Properties": {
        "ResponseParameters": {
          "gatewayresponse.header.Access-Control-Allow-Origin": "'*'",
          "gatewayresponse.header.Access-Control-Allow-Headers": "'*'",
          "gatewayresponse.header.Access-Control-Allow-Methods": "'GET,OPTIONS,POST'"
        },
        "ResponseType": "DEFAULT_4XX",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "GroupsDynamoDBTable": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "TableName": "Groups-dev",
        "AttributeDefinitions": [
          {
            "AttributeName": "id",
            "AttributeType": "S"
          }
        ],
        "KeySchema": [
          {
            "AttributeName": "id",
            "KeyType": "HASH"
          }
        ],
        "BillingMode": "PAY_PER_REQUEST"
      }
    },
    "ImagesDynamoDBTable": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "TableName": "Image-dev",
        "AttributeDefinitions": [
          {
            "AttributeName": "groupId",
            "AttributeType": "S"
          },
          {
            "AttributeName": "timestamp",
            "AttributeType": "S"
          },
          {
            "AttributeName": "imageId",
            "AttributeType": "S"
          }
        ],
        "KeySchema": [
          {
            "AttributeName": "groupId",
            "KeyType": "HASH"
          },
          {
            "AttributeName": "timestamp",
            "KeyType": "RANGE"
          }
        ],
        "GlobalSecondaryIndexes": [
          {
            "IndexName": "ImageIdIndex",
            "KeySchema": [
              {
                "AttributeName": "imageId",
                "KeyType": "HASH"
              }
            ],
            "Projection": {
              "ProjectionType": "ALL"
            }
          }
        ],
        "BillingMode": "PAY_PER_REQUEST",
        "StreamSpecification": {
          "StreamViewType": "NEW_IMAGE"
        }
      }
    },
    "ConnectionsDynamoDBTable": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "TableName": "Connections-dev",
        "AttributeDefinitions": [
          {
            "AttributeName": "id",
            "AttributeType": "S"
          }
        ],
        "KeySchema": [
          {
            "AttributeName": "id",
            "KeyType": "HASH"
          }
        ],
        "BillingMode": "PAY_PER_REQUEST"
      }
    },
    "AttachmentsBucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "BucketName": "serverless-udagram-images-kelue-dev",
        "NotificationConfiguration": {
          "TopicConfigurations": [
            {
              "Event": "s3:ObjectCreated:*",
              "Topic": {
                "Ref": "ImagesTopic"
              }
            }
          ]
        },
        "CorsConfiguration": {
          "CorsRules": [
            {
              "AllowedOrigins": [
                "*"
              ],
              "AllowedHeaders": [
                "*"
              ],
              "AllowedMethods": [
                "GET",
                "PUT",
                "POST",
                "DELETE",
                "HEAD"
              ],
              "MaxAge": 3000
            }
          ]
        }
      }
    },
    "BucketPolicy": {
      "Type": "AWS::S3::BucketPolicy",
      "Properties": {
        "PolicyDocument": {
          "Id": "MyPolicy",
          "Version": "2012-10-17",
          "Statement": [
            {
              "Sid": "PublicReadForGetBucketObjects",
              "Effect": "Allow",
              "Principal": "*",
              "Action": "s3:GetObject",
              "Resource": "arn:aws:s3:::serverless-udagram-images-kelue-dev/*"
            }
          ]
        },
        "Bucket": "serverless-udagram-images-kelue-dev"
      }
    },
    "ImagesTopic": {
      "Type": "AWS::SNS::Topic",
      "Properties": {
        "DisplayName": "Images Bucket Topic",
        "TopicName": "imagesTopic-dev"
      }
    },
    "SNSTopicPolicy": {
      "Type": "AWS::SNS::TopicPolicy",
      "Properties": {
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "AWS": "*"
              },
              "Action": "sns:Publish",
              "Resource": {
                "Ref": "ImagesTopic"
              },
              "Condition": {
                "ArnLike": {
                  "AWS:SourceArn": "arn:aws:s3:::serverless-udagram-images-kelue-dev"
                }
              }
            }
          ]
        },
        "Topics": [
          {
            "Ref": "ImagesTopic"
          }
        ]
      }
    },
    "ImagesSearch": {
      "Type": "AWS::Elasticsearch::Domain",
      "Properties": {
        "ElasticsearchVersion": "6.3",
        "DomainName": "images-search-dev",
        "ElasticsearchClusterConfig": {
          "DedicatedMasterEnabled": false,
          "InstanceCount": "1",
          "ZoneAwarenessEnabled": false,
          "InstanceType": "t2.small.elasticsearch"
        },
        "EBSOptions": {
          "EBSEnabled": true,
          "Iops": 0,
          "VolumeSize": 10,
          "VolumeType": "gp2"
        },
        "AccessPolicies": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "AWS": "*"
              },
              "Action": [
                "es:*"
              ],
              "Resource": {
                "Fn::Sub": "arn:aws:es:us-east-2:${AWS::AccountId}:domain/images-search-dev/*"
              },
              "Condition": {
                "IpAddress": {
                  "aws:SourceIp": [
                    "197.210.79.163"
                  ]
                }
              }
            }
          ]
        }
      }
    },
    "ThumbnailsBucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "BucketName": "serverless-udagram-images-kelue-thumbnails-dev",
        "CorsConfiguration": {
          "CorsRules": [
            {
              "AllowedOrigins": [
                "*"
              ],
              "AllowedHeaders": [
                "*"
              ],
              "AllowedMethods": [
                "GET",
                "PUT",
                "POST",
                "DELETE",
                "HEAD"
              ],
              "MaxAge": 3000
            }
          ]
        }
      }
    },
    "ThumbnailsBucketPolicy": {
      "Type": "AWS::S3::BucketPolicy",
      "Properties": {
        "PolicyDocument": {
          "Id": "ThumbnailsPolicy",
          "Version": "2012-10-17",
          "Statement": [
            {
              "Sid": "PublicReadForGetBucketObjects",
              "Effect": "Allow",
              "Principal": "*",
              "Action": "s3:GetObject",
              "Resource": "arn:aws:s3:::serverless-udagram-images-kelue-thumbnails-dev/*"
            }
          ]
        },
        "Bucket": "serverless-udagram-images-kelue-thumbnails-dev"
      }
    },
    "KMSKey": {
      "Type": "AWS::KMS::Key",
      "Properties": {
        "Description": "KMS Key to encrypt Auth0 certificate",
        "KeyPolicy": {
          "Id": "key-default-1",
          "Version": "2012-10-17",
          "Statement": [
            {
              "Sid": "Allow administration of the key",
              "Effect": "Allow",
              "Principal": {
                "AWS": {
                  "Fn::Join": [
                    ":",
                    [
                      "arn:aws:iam:",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      "root"
                    ]
                  ]
                }
              },
              "Action": "kms:*",
              "Resource": "*"
            }
          ]
        }
      }
    },
    "KMSKeyAlias": {
      "Type": "AWS::KMS::Alias",
      "Properties": {
        "AliasName": "alias/auth0Key-dev",
        "TargetKeyId": {
          "Ref": "KMSKey"
        }
      }
    },
    "Auth0Secret": {
      "Type": "AWS::SecretsManager::Secret",
      "Properties": {
        "Name": "Auth0Secret-dev",
        "Description": "Auth0 secret",
        "KmsKeyId": {
          "Ref": "KMSKey"
        }
      }
    }
  },
  "Outputs": {
    "ServerlessDeploymentBucketName": {
      "Value": {
        "Ref": "ServerlessDeploymentBucket"
      },
      "Export": {
        "Name": "sls-serverless-app-dev-ServerlessDeploymentBucketName"
      }
    },
    "GroupsLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GroupsLambdaVersionSzdknUM7jJPuD1USgR8SgJ202OCOX5Zui7zi1SX3co"
      },
      "Export": {
        "Name": "sls-serverless-app-dev-GroupsLambdaFunctionQualifiedArn"
      }
    },
    "CreategroupLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "CreategroupLambdaVersionmlsAL9rsPKD3Rs4Bz7BANrB3GRpkcaceADkEiRgK1Iw"
      },
      "Export": {
        "Name": "sls-serverless-app-dev-CreategroupLambdaFunctionQualifiedArn"
      }
    },
    "GetImagesLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetImagesLambdaVersionmzlcILae3qpD4fiadv2lnQy4NF2JaqzKFMrcJZ9sA"
      },
      "Export": {
        "Name": "sls-serverless-app-dev-GetImagesLambdaFunctionQualifiedArn"
      }
    },
    "GetimageLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetimageLambdaVersion3O2OaIfWYVWSCTEqqhHAxhsJXQ4B02UZneL9UwaD1tM"
      },
      "Export": {
        "Name": "sls-serverless-app-dev-GetimageLambdaFunctionQualifiedArn"
      }
    },
    "CreateimageLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "CreateimageLambdaVersionc2RE48pHioU0ynD402LvScrKPQM0nCSMslZMNpoUzY"
      },
      "Export": {
        "Name": "sls-serverless-app-dev-CreateimageLambdaFunctionQualifiedArn"
      }
    },
    "SendNotificationsLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "SendNotificationsLambdaVersionKxwivloPff9JtoqlK61Q4nUASFDN049uhDUuNlHO0g"
      },
      "Export": {
        "Name": "sls-serverless-app-dev-SendNotificationsLambdaFunctionQualifiedArn"
      }
    },
    "ConnectLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "ConnectLambdaVersionuy5uyfcjFJt9PBuyrre87qtrnjwIKi0Cu7JlmoGZWhc"
      },
      "Export": {
        "Name": "sls-serverless-app-dev-ConnectLambdaFunctionQualifiedArn"
      }
    },
    "DisconnectLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "DisconnectLambdaVersioncewcyNJbYqw8BtpgDxa6QbSUzi9yj3JULLXDSEMse0"
      },
      "Export": {
        "Name": "sls-serverless-app-dev-DisconnectLambdaFunctionQualifiedArn"
      }
    },
    "ElasticSearchSyncLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "ElasticSearchSyncLambdaVersionnaPuZcuXQ9wnGmlkP7G38z1uQI81z7MNb6YRe4LX10c"
      },
      "Export": {
        "Name": "sls-serverless-app-dev-ElasticSearchSyncLambdaFunctionQualifiedArn"
      }
    },
    "ResizeLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "ResizeLambdaVersionImhE7N0rQ6JoV72n6y8aUaKHXnsS7wTwAOwCDVV1I"
      },
      "Export": {
        "Name": "sls-serverless-app-dev-ResizeLambdaFunctionQualifiedArn"
      }
    },
    "Auth0AuthorizerLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "Auth0AuthorizerLambdaVersionqSlChBoGGyKQdtARYqkNig7n05VmG8wfCFVIzBdX0xc"
      },
      "Export": {
        "Name": "sls-serverless-app-dev-Auth0AuthorizerLambdaFunctionQualifiedArn"
      }
    },
    "ServiceEndpoint": {
      "Description": "URL of the service endpoint",
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Ref": "ApiGatewayRestApi"
            },
            ".execute-api.",
            {
              "Ref": "AWS::Region"
            },
            ".",
            {
              "Ref": "AWS::URLSuffix"
            },
            "/dev"
          ]
        ]
      },
      "Export": {
        "Name": "sls-serverless-app-dev-ServiceEndpoint"
      }
    },
    "ServiceEndpointWebsocket": {
      "Description": "URL of the service endpoint",
      "Value": {
        "Fn::Join": [
          "",
          [
            "wss://",
            {
              "Ref": "WebsocketsApi"
            },
            ".execute-api.",
            {
              "Ref": "AWS::Region"
            },
            ".",
            {
              "Ref": "AWS::URLSuffix"
            },
            "/dev"
          ]
        ]
      },
      "Export": {
        "Name": "sls-serverless-app-dev-ServiceEndpointWebsocket"
      }
    }
  }
}